<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta [
<!ELEMENT project (imports?, declaration?, template*, lsc*, instantiation?, system, queries?)>
<!ELEMENT imports (#PCDATA)>
<!ELEMENT declaration (#PCDATA)>
<!ELEMENT template (name, parameter?, declaration?, location*, init?, transition*)>
<!ELEMENT name (#PCDATA)>
<!ATTLIST name x   CDATA #IMPLIED
               y   CDATA #IMPLIED>
<!ELEMENT parameter (#PCDATA)>
<!ATTLIST parameter x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!ELEMENT location (name?, label*, urgent?, committed?)>
<!ATTLIST location id ID #REQUIRED
		   x  CDATA #IMPLIED
		   y  CDATA #IMPLIED
		   color CDATA #IMPLIED>
<!ELEMENT init EMPTY>
<!ATTLIST init ref IDREF #IMPLIED>
<!ELEMENT urgent EMPTY>
<!ELEMENT committed EMPTY>
<!ELEMENT transition (source, target, label*, nail*)>
<!ATTLIST transition id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
		     color CDATA #IMPLIED>
<!ELEMENT source EMPTY>
<!ATTLIST source ref IDREF #REQUIRED>
<!ELEMENT target EMPTY>
<!ATTLIST target ref IDREF #REQUIRED>
<!ELEMENT label (#PCDATA)>
<!ATTLIST label	kind CDATA #REQUIRED
		x    CDATA #IMPLIED
		y    CDATA #IMPLIED>
<!ELEMENT nail EMPTY>
<!ATTLIST nail x   CDATA #REQUIRED
               y   CDATA #REQUIRED>
               
<!-- LSC template -->
<!ELEMENT lsc (name, parameter?, type, mode, declaration?, yloccoord+, instance+, prechart?, message*, condition*, update*, cut*, scope*, coregion*, subchart*, loop*, ifthenelse*)>

<!-- type: existential | universal -->
<!ELEMENT type (#PCDATA)>
<!ATTLIST type      x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!-- mode: initial | iterative | invariant -->
<!ELEMENT mode (#PCDATA)>
<!ATTLIST mode      x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!-- role: specification | property -->
<!ELEMENT role (#PCDATA)>
<!ATTLIST role      x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!-- yloccoord: Y coordinate for location on all instances (same loc number => same Y coord) -->
<!ELEMENT yloccoord EMPTY>
<!ATTLIST yloccoord number CDATA #REQUIRED
                    y      CDATA #REQUIRED>


<!-- instance: carries unique ID, label(which can change during run), and temperatures of the locations -->
<!ELEMENT instance (name)>
<!ATTLIST instance id ID #REQUIRED
           x  CDATA #REQUIRED
           y  CDATA #IMPLIED>
<!-- temperature = hot | cold, identified by location_number (or, if location numbers not present, count from 1 on) -->
<!ELEMENT temperature (#PCDATA)>
<!ATTLIST temperature y CDATA #IMPLIED>


<!-- message: refs of src, trg instances; location; label=name -->
<!ELEMENT message (source, target, lsclocation, label)>
<!ATTLIST message    id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>
    <!-- source points to ID of instance line -->
    <!-- target points to ID of instance line -->
<!ELEMENT lsclocation (#PCDATA)>

    <!-- anchor refers to instance ID and optionally carries the location number (y)-->
<!ELEMENT anchor EMPTY>
<!ATTLIST anchor     instanceid IDREF #REQUIRED
                     y CDATA #IMPLIED>

<!-- condition: anchors+ (= {x,y} with y being the same);  temperature; label=expression -->
<!ELEMENT condition (anchor+, lsclocation, temperature, label)>
<!ATTLIST condition  id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- update: anchor; location; label=expression -->
<!ELEMENT update (anchor, lsclocation, label)>
<!ATTLIST update     id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- prechart: spans over ALL instances by default, only need to specify its bottom location -->
<!ELEMENT prechart  (lsclocation)>
<!ATTLIST prechart   id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- the following LSC constructs are deemed optional - may be ignored in the first version of LSC editor -->

<!-- cut: nothing but a set of anchors (=pair {x,y}) -->
<!ELEMENT cut  (anchor+)>
<!ATTLIST cut        id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- scope: upper & lower locations, temperature; reference to the IDs of 2 cuts -->
<!ELEMENT scope (lsclocation, lsclocation, temperature)>
<!ATTLIST scope      id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             cut1ref IDREF #REQUIRED
             cut2ref IDREF #REQUIRED
             color CDATA #IMPLIED>

<!-- coregion: instance (by anchor(s)), locations deduced from anchors -->
<!ELEMENT coregion (anchor, anchor)>
<!ATTLIST coregion   id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- loop: anchors over instances, upper and lower location, and label=expression -->
<!ELEMENT loop (anchor+, lsclocation, lsclocation, label)>
<!ATTLIST loop       id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- subchart: anchors over instances, upper and lower location -->
<!ELEMENT subchart   (anchor+, lsclocation, lsclocation)>
<!ATTLIST subchart   id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- ifThenElse: anchors over instances, top/middle/bottom locations and label=expression -->
<!ELEMENT ifthenelse (anchor+, lsclocation, lsclocation, lsclocation, label)>
<!ATTLIST ifthenelse id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>
               
<!ELEMENT instantiation (#PCDATA)>
<!ELEMENT system (#PCDATA)>
<!ELEMENT queries (query*)>
<!ELEMENT query (comment,formula)>
<!ELEMENT formula (#PCDATA)>
<!ELEMENT comment (#PCDATA)>
]>
<nta>
	<declaration>// Place global declarations here. chan up; chan down; int MAX = 10; int __reach__ = 0; int __single__ = 0; </declaration>


-<template>

<name y="5" x="5">System</name>

<declaration>// Place local declarations here. int val = 0;</declaration>


-<location y="-153" x="263" id="id0">

<name y="-179" x="280">Max</name>

<label kind="testcodeEnter">expect_max();</label>

</location>


-<location y="-93" x="136" id="id1">

<name y="-76" x="119">On</name>

<label kind="testcodeEnter">expect_on($(System.val));</label>

</location>


-<location y="-17" x="8" id="id2">

<name y="-17" x="-26">Off</name>

<label kind="testcodeEnter">expect_off();</label>

</location>

<init ref="id2"/>


-<transition>

<source ref="id1"/>

<target ref="id1"/>

<label y="-42" x="212" kind="guard">val<9</label>

<label y="-25" x="212" kind="synchronisation">up?</label>

<label y="-8" x="212" kind="assignment">val++</label>

<label kind="testcode">assertTrue(cs.state<9); cs.up();</label>

<nail y="-42" x="203"/>

<nail y="-42" x="263"/>

</transition>


-<transition>

<source ref="id1"/>

<target ref="id1"/>

<label y="-178" x="51" kind="guard">val>1</label>

<label y="-161" x="51" kind="synchronisation">down?</label>

<label y="-144" x="51" kind="assignment">val--</label>

<label kind="testcode">assertTrue(cs.state>1); cs.down();</label>

<nail y="-127" x="51"/>

<nail y="-127" x="102"/>

</transition>


-<transition>

<source ref="id0"/>

<target ref="id1"/>

<label y="-136" x="238" kind="synchronisation">down?</label>

<label y="-119" x="238" kind="assignment">val--</label>

<label kind="testcode">cs.down();</label>

<nail y="-93" x="187"/>

</transition>


-<transition>

<source ref="id1"/>

<target ref="id0"/>

<label y="-195" x="153" kind="guard">val == 9</label>

<label y="-178" x="153" kind="synchronisation">up?</label>

<label y="-161" x="153" kind="assignment">val++</label>

<label kind="testcode">assertTrue(cs.state == 9); cs.up();</label>

<nail y="-153" x="221"/>

</transition>


-<transition>

<source ref="id1"/>

<target ref="id2"/>

<label y="17" x="51" kind="guard">val==1</label>

<label y="-17" x="51" kind="synchronisation">down?</label>

<label y="0" x="51" kind="assignment">val--</label>

<label kind="testcode">assertTrue(cs.state == 1); cs.down();</label>

<nail y="-17" x="42"/>

</transition>


-<transition>

<source ref="id2"/>

<target ref="id1"/>

<label y="-68" x="-34" kind="synchronisation">up?</label>

<label y="-51" x="-34" kind="assignment">val++</label>

<label kind="testcode">cs.up();</label>

<nail y="-93" x="102"/>

</transition>

</template>


-<template>

<name>User</name>

<location y="-17" x="-17" id="id3"> </location>

<init ref="id3"/>


-<transition>

<source ref="id3"/>

<target ref="id3"/>

<label y="34" x="-25" kind="synchronisation">down!</label>

<nail y="34" x="-42"/>

<nail y="34" x="9"/>

</transition>


-<transition>

<source ref="id3"/>

<target ref="id3"/>

<label y="-85" x="-26" kind="synchronisation">up!</label>

<nail y="-68" x="-43"/>

<nail y="-68" x="8"/>

</transition>

</template>

<system>// Place template instantiations here. // List one or more processes to be composed into a system. system System, User; /** TEST_PREFIX package app; import app.App; class Test extends App {public static void main(String[] args) { */ /** TEST_POSTFIX} } */ </system>


-<queries>


-<query>

<formula>E<> System.Max </formula>

<comment> </comment>

</query>

</queries>

</nta>
