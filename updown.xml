<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta [
<!ELEMENT project (imports?, declaration?, template*, lsc*, instantiation?, system, queries?)>
<!ELEMENT imports (#PCDATA)>
<!ELEMENT declaration (#PCDATA)>
<!ELEMENT template (name, parameter?, declaration?, location*, init?, transition*)>
<!ELEMENT name (#PCDATA)>
<!ATTLIST name x   CDATA #IMPLIED
               y   CDATA #IMPLIED>
<!ELEMENT parameter (#PCDATA)>
<!ATTLIST parameter x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!ELEMENT location (name?, label*, urgent?, committed?)>
<!ATTLIST location id ID #REQUIRED
		   x  CDATA #IMPLIED
		   y  CDATA #IMPLIED
		   color CDATA #IMPLIED>
<!ELEMENT init EMPTY>
<!ATTLIST init ref IDREF #IMPLIED>
<!ELEMENT urgent EMPTY>
<!ELEMENT committed EMPTY>
<!ELEMENT transition (source, target, label*, nail*)>
<!ATTLIST transition id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
		     color CDATA #IMPLIED>
<!ELEMENT source EMPTY>
<!ATTLIST source ref IDREF #REQUIRED>
<!ELEMENT target EMPTY>
<!ATTLIST target ref IDREF #REQUIRED>
<!ELEMENT label (#PCDATA)>
<!ATTLIST label	kind CDATA #REQUIRED
		x    CDATA #IMPLIED
		y    CDATA #IMPLIED>
<!ELEMENT nail EMPTY>
<!ATTLIST nail x   CDATA #REQUIRED
               y   CDATA #REQUIRED>
               
<!-- LSC template -->
<!ELEMENT lsc (name, parameter?, type, mode, declaration?, yloccoord+, instance+, prechart?, message*, condition*, update*, cut*, scope*, coregion*, subchart*, loop*, ifthenelse*)>

<!-- type: existential | universal -->
<!ELEMENT type (#PCDATA)>
<!ATTLIST type      x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!-- mode: initial | iterative | invariant -->
<!ELEMENT mode (#PCDATA)>
<!ATTLIST mode      x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!-- role: specification | property -->
<!ELEMENT role (#PCDATA)>
<!ATTLIST role      x   CDATA #IMPLIED
                    y   CDATA #IMPLIED>
<!-- yloccoord: Y coordinate for location on all instances (same loc number => same Y coord) -->
<!ELEMENT yloccoord EMPTY>
<!ATTLIST yloccoord number CDATA #REQUIRED
                    y      CDATA #REQUIRED>


<!-- instance: carries unique ID, label(which can change during run), and temperatures of the locations -->
<!ELEMENT instance (name)>
<!ATTLIST instance id ID #REQUIRED
           x  CDATA #REQUIRED
           y  CDATA #IMPLIED>
<!-- temperature = hot | cold, identified by location_number (or, if location numbers not present, count from 1 on) -->
<!ELEMENT temperature (#PCDATA)>
<!ATTLIST temperature y CDATA #IMPLIED>


<!-- message: refs of src, trg instances; location; label=name -->
<!ELEMENT message (source, target, lsclocation, label)>
<!ATTLIST message    id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>
    <!-- source points to ID of instance line -->
    <!-- target points to ID of instance line -->
<!ELEMENT lsclocation (#PCDATA)>

    <!-- anchor refers to instance ID and optionally carries the location number (y)-->
<!ELEMENT anchor EMPTY>
<!ATTLIST anchor     instanceid IDREF #REQUIRED
                     y CDATA #IMPLIED>

<!-- condition: anchors+ (= {x,y} with y being the same);  temperature; label=expression -->
<!ELEMENT condition (anchor+, lsclocation, temperature, label)>
<!ATTLIST condition  id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- update: anchor; location; label=expression -->
<!ELEMENT update (anchor, lsclocation, label)>
<!ATTLIST update     id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- prechart: spans over ALL instances by default, only need to specify its bottom location -->
<!ELEMENT prechart  (lsclocation)>
<!ATTLIST prechart   id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- the following LSC constructs are deemed optional - may be ignored in the first version of LSC editor -->

<!-- cut: nothing but a set of anchors (=pair {x,y}) -->
<!ELEMENT cut  (anchor+)>
<!ATTLIST cut        id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- scope: upper & lower locations, temperature; reference to the IDs of 2 cuts -->
<!ELEMENT scope (lsclocation, lsclocation, temperature)>
<!ATTLIST scope      id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             cut1ref IDREF #REQUIRED
             cut2ref IDREF #REQUIRED
             color CDATA #IMPLIED>

<!-- coregion: instance (by anchor(s)), locations deduced from anchors -->
<!ELEMENT coregion (anchor, anchor)>
<!ATTLIST coregion   id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- loop: anchors over instances, upper and lower location, and label=expression -->
<!ELEMENT loop (anchor+, lsclocation, lsclocation, label)>
<!ATTLIST loop       id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- subchart: anchors over instances, upper and lower location -->
<!ELEMENT subchart   (anchor+, lsclocation, lsclocation)>
<!ATTLIST subchart   id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>

<!-- ifThenElse: anchors over instances, top/middle/bottom locations and label=expression -->
<!ELEMENT ifthenelse (anchor+, lsclocation, lsclocation, lsclocation, label)>
<!ATTLIST ifthenelse id  ID #IMPLIED
                     x   CDATA #IMPLIED
                     y   CDATA #IMPLIED
             color CDATA #IMPLIED>
               
<!ELEMENT instantiation (#PCDATA)>
<!ELEMENT system (#PCDATA)>
<!ELEMENT queries (query*)>
<!ELEMENT query (comment,formula)>
<!ELEMENT formula (#PCDATA)>
<!ELEMENT comment (#PCDATA)>
]>
<nta>
	<declaration>// Place global declarations here.

chan up;
chan down;

int MAX = 10;

bool testgoal = false;

int __reach__ = 0;
int __single__ = 0;
</declaration>
	<template>
		<name x="5" y="5">System</name>
		<declaration>// Place local declarations here.

int val = 0;</declaration>
		<location id="id0" x="263" y="-153">
			<name x="280" y="-179">Max</name>
		</location>
		<location id="id1" x="136" y="-93">
			<name x="119" y="-76">On</name>
		</location>
		<location id="id2" x="8" y="-17">
			<name x="-26" y="-17">Off</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="212" y="-42">val&lt;9</label>
			<label kind="synchronisation" x="212" y="-25">up?</label>
			<label kind="assignment" x="212" y="-8">val++</label>
			<label kind="testcode">cs.up();
cs.expect_on(cs.state);</label>
			<nail x="203" y="-42"/>
			<nail x="263" y="-42"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="51" y="-178">val&gt;1</label>
			<label kind="synchronisation" x="51" y="-161">down?</label>
			<label kind="assignment" x="51" y="-144">val--</label>
			<label kind="testcode">assertTrue(cs.state&gt;1);
cs.down();
cs.expect_on(cs.state);</label>
			<nail x="51" y="-127"/>
			<nail x="102" y="-127"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="238" y="-136">down?</label>
			<label kind="assignment" x="238" y="-119">val--</label>
			<label kind="testcode">cs.down();
cs.expect_on(9);</label>
			<nail x="187" y="-93"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="153" y="-195">val == 9</label>
			<label kind="synchronisation" x="153" y="-178">up?</label>
			<label kind="assignment" x="153" y="-161">val++</label>
			<label kind="testcode">cs.expect_max();
		cs.up();</label>
			<nail x="221" y="-153"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="51" y="17">val==1</label>
			<label kind="synchronisation" x="51" y="-17">down?</label>
			<label kind="assignment" x="51" y="0">val--</label>
			<label kind="testcode">cs.down();
cs.expect_off();</label>
			<nail x="42" y="-17"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-34" y="-68">up?</label>
			<label kind="assignment" x="-34" y="-51">val++</label>
			<label kind="testcode">cs.up();
cs.expect_on(1);</label>
			<nail x="102" y="-93"/>
		</transition>
	</template>
	<template>
		<name>User</name>
		<location id="id3" x="-17" y="-17">
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-25" y="34">down!</label>
			<nail x="-42" y="34"/>
			<nail x="9" y="34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-26" y="-85">up!</label>
			<nail x="-43" y="-68"/>
			<nail x="8" y="-68"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system System, User;


/** TEST_PREFIX
package app;
import app.App;

class Test extends App {

    public static void main(String[] args) {

*/

/** TEST_POSTFIX
    }
}
*/
</system>
	<queries>
		<query>
			<formula>E&lt;&gt; System.Max
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
